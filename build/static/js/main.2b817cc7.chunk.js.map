{"version":3,"sources":["App.js","index.js"],"names":["App","useState","notes","setnotes","NewNote","setNewNote","update","setupdate","displayNote","setdisplayNote","showAll","setShowAll","notesToShow","filter","note","important","addnoteToDb","axios","post","content","then","res","console","log","alert","useEffect","get","concat","data","className","onClick","map","n","id","url","find","changedNote","put","response","toggleImportance","type","onChange","e","target","value","ReactDOM","render","document","getElementById"],"mappings":"wNA4FeA,MApFf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAMG,EAAN,KAAcC,EAAd,KACA,EAA0BJ,oBAAS,GAAnC,mBAAMK,EAAN,KAAaC,EAAb,KACA,EAAoCN,mBAAS,IAA7C,mBAAMO,EAAN,KAAkBC,EAAlB,KACA,EAA6BR,oBAAS,GAAtC,mBAAMS,EAAN,KAAeC,EAAf,KAGMC,EAAcF,EAASR,EAAOA,EAAMW,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAcxDC,EAAc,WACdZ,EAGFa,IAAMC,KAAK,aAAa,CAACC,QAAQf,IAChCgB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,MAJdG,MAAM,yBAwCV,OAFEC,qBATe,WACfR,IAAMS,IAAI,cACTN,MAAK,SAAAC,GAEJlB,EAASD,EAAMyB,OAAON,EAAIO,OAC1BnB,EAAeD,EAAYmB,OAAON,EAAIO,YAIrB,CAACtB,IAGpB,sBAAKuB,UAAU,MAAf,UACA,uCACA,sBAAKA,UAAU,YAAf,UACA,yBAAQC,QAAS,kBAAMnB,GAAYD,IAAUmB,UAAU,SAAvD,kBACUnB,EAAU,YAAc,SAElC,6BACCE,EAAYmB,KAAI,SAAAC,GAAC,OAAI,mCAAiBA,EAAEb,QACzC,wBAAQU,UAAWG,EAAEjB,UAAW,YAAY,eAAgBe,QAAS,kBAjC9C,SAAAG,GACvB,IAAMC,EAAG,qBAAiBD,GAC1BX,QAAQC,IAAIrB,GACZoB,QAAQC,IAAIf,GACZ,IAAMM,EAAOZ,EAAMiC,MAAK,SAAAH,GAAC,OAAIA,EAAEC,KAAOA,KACtCX,QAAQC,IAAIT,GACZ,IAAMsB,EAAW,2BAAQtB,GAAR,IAAcC,WAAYD,EAAKC,YAEhDE,IAAMoB,IAAIH,EAAKE,GAAahB,MAAK,SAAAkB,GAC/BnC,EAASD,EAAM6B,KAAI,SAAAjB,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAOwB,EAASV,YAwBaW,CAAiBP,EAAEC,KAA9F,SAAoGD,EAAEjB,UAAW,qBAAqB,mBADhH,MAASiB,EAAEC,SAGjC,sBAAKJ,UAAU,cAAf,UACA,uBAAOW,KAAK,OAAOC,SAjEA,SAACC,GACpBrC,EAAWqC,EAAEC,OAAOC,UAiEpB,wBAAQf,UAAU,OAAOC,QA7DN,WACnBvB,GAAWD,GACXH,EAAS,IACTa,KA0DA,4BChFJ6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2b817cc7.chunk.js","sourcesContent":["import './App.css';\nimport axios from 'axios'\nimport {useState,useEffect} from 'react'\n\n//todo\n//add the new build to backend\n//reflect importance upon in frontend upon clicking\n\nfunction App() {\n  const [notes, setnotes] = useState([])\n  const[NewNote,setNewNote] = useState('')\n  const[update,setupdate] = useState(true)\n  const[displayNote,setdisplayNote] = useState([])\n  const[showAll, setShowAll] = useState(true)\n\n\n  const notesToShow = showAll? notes: notes.filter(note => note.important === true)\n\n\n  const handleChange = (e) => {\n    setNewNote(e.target.value)\n  }\n\n//pls forgive me..there must be a better way to do this\n  const handleSubmit = () => {\n    setupdate(!update)\n    setnotes([])\n    addnoteToDb()\n  }\n\n  const addnoteToDb = () => {\n    if(!NewNote){\n      alert(\"Please enter a note!\")\n    }else{\n      axios.post('/api/notes',{content:NewNote})\n      .then(res => {\n        console.log(res)})\n    }\n  }\n\n  // const toggleImportance = (note) => {\n  //   axios.put(`/api/notes/${note.id}`,{\n  //     content:note.content,\n  //     important:!note.important\n  //   }).then(res => {console.log(res)})\n  //   .catch(err => console.log(err))\n  // }\n\n  const toggleImportance = id => {\n    const url = `/api/notes/${id}`\n    console.log(notes)\n    console.log(displayNote)\n    const note = notes.find(n => n.id === id)\n    console.log(note)\n    const changedNote = { ...note, important: !note.important }\n  \n    axios.put(url, changedNote).then(response => {\n      setnotes(notes.map(note => note.id !== id ? note : response.data))\n    })\n  }\n\n  const getNotes = () => {\n    axios.get('/api/notes')\n    .then(res => {\n      // console.log(res.data)\n      setnotes(notes.concat(res.data))\n      setdisplayNote(displayNote.concat(res.data))\n    })\n  }\n// eslint-disable-next-line\n    useEffect(getNotes,[update])\n\n  return (\n    <div className=\"App\">\n    <h1>Notes</h1>\n    <div className=\"container\">\n    <button onClick={() => setShowAll(!showAll)} className=\"filter\">          \n        Show {showAll ? 'important' : 'all' }\n    </button>\n    <ul>\n    {notesToShow.map(n => <li key={n.id}> {n.content} \n    <button className={n.important? \"important\":\"notImportant\"} onClick={() => toggleImportance(n.id)}>{n.important? \"make not important\":\"make important\"}</button> </li>)}\n    </ul>\n    <div className=\"input-notes\">\n    <input type=\"text\" onChange={handleChange}/>\n    <button className=\"save\" onClick={handleSubmit}>save</button>\n    </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}